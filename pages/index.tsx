import Head from 'next/head';
import TwitterLogin from '@/components/twitterLogin';
import MisskeyLogin from '@/components/misskeyLogin';
import styles from '@/styles/Home.module.css';
import React, { createContext, useEffect, useState } from 'react';
import { useRecoilValue } from 'recoil';
import {
  mkValidationState,
  twValidationState,
} from '@/components/stores/login';

export const twIsLoginContext = createContext<IsLoginContextProps>({
  isLogin: false,
  setIsLogin: () => {},
});
export const mkIsLoginContext = createContext<IsLoginContextProps>({
  isLogin: false,
  setIsLogin: () => {},
});

export const twIconContext = createContext<IconContextProps>({
  iconUrl: '',
  setIconUrl: () => {},
});
export const mkIconContext = createContext<IconContextProps>({
  iconUrl: '',
  setIconUrl: () => {},
});

const Home = () => {
  const twVState = useRecoilValue(twValidationState);
  const mkVState = useRecoilValue(mkValidationState);
  const [postingContent, setPostingContent] = useState<string>('');
  const [canPosting, setCanPosting] = useState<boolean>(false);

  const twIconUrl = twVState.data.profile_image_url;
  const mkIconUrl = mkVState.data.avatarUrl;

  const twIsLogin = twVState.isLogin;
  const mkIsLogin = mkVState.isLogin;

  useEffect(() => {
    setCanPosting(twIsLogin && mkIsLogin);
  }, [setCanPosting, twIsLogin, mkIsLogin]);

  const onChangePostingContent = (
    event: React.ChangeEvent<HTMLTextAreaElement>
  ): void => {
    setPostingContent(event.target.value);
  };

  const login = async (postingContent: string, canPosting: boolean) => {
    if (!canPosting || !postingContent) return;

    setCanPosting(false);
    const res = await fetch('/api/post', {
      method: 'POST',
      body: JSON.stringify({
        content: postingContent,
      }),
    });
    if (res.status !== 200) {
      console.error(`failed to post. status: ${res.status}`);

      return;
    }

    setPostingContent('');
    setCanPosting(true);

    return;
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>CaffeBruncher</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>CaffeBruncher</h1>

        <div>
          <div>
            <div className={styles.topbar}>
              <div>
                <img
                  src={twIconUrl}
                  alt='twitter icon'
                  className={styles.icon}
                />
                <img
                  src={mkIconUrl}
                  alt='misskey icon'
                  className={styles.icon}
                />
              </div>
              <button
                type='submit'
                disabled={!canPosting}
                onClick={() => {
                  login(postingContent, canPosting);
                }}
              >
                Send
              </button>
            </div>
            <textarea
              className={styles.inputArea}
              value={postingContent}
              disabled={!canPosting}
              onChange={onChangePostingContent}
            ></textarea>
          </div>
        </div>

        <div className={styles.login}>
          <TwitterLogin />
          <MisskeyLogin />
        </div>
      </main>
    </div>
  );
};

export default Home;
